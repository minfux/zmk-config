#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
	behaviors {
        // ===== Lowercase Umlauts =====
        a_umlaut: a_umlaut_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp A>;  // " + a → ä
        };
        o_umlaut: o_umlaut_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp O>;  // " + o → ö
        };

        // ===== Uppercase Umlauts (Shift-Aware) =====
        A_umlaut: A_umlaut_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp LS(A)>;  // " + Shift+A → Ä
        };
        O_umlaut: O_umlaut_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp LS(O)>;  // " + Shift+O → Ö
        };

        // ===== Shift-Aware Umlaut Behaviors =====
        // (Automatically picks lowercase/uppercase based on Shift)
        smart_a_umlaut: smart_a_umlaut {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&a_umlaut>, <&A_umlaut>;  // ä or Ä
            mods = <(MOD_LSFT|MOD_RSFT)>;  // Activates on Shift
        };
        smart_o_umlaut: smart_o_umlaut {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&o_umlaut>, <&O_umlaut>;  // ö or Ö
            mods = <(MOD_LSFT|MOD_RSFT)>;  // Activates on Shift
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
			bindings = <
				// ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐    ┌─────────┬─────────┬─────────┬─────────┬─────────┬──────────┐
				// │   ESC   │    Q    │    W    │    E    │    R    │    T    │    │    Y    │    U    │    I    │    O    │    P    │   ALT    │
    				&kp ESC     &kp Q     &kp W      &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P    &kp RALT
				// ├─────────┴─────────┴─────────┴─────────┴─────────┴─────────┤    ├─────────┴─────────┴─────────┴─────────┴─────────┴──────────┤
				// │  SHFT   │    A    │    S    │    D    │    F    │    G    │    │    H    │    J    │    K    │    L    │   .     │   SHFT   │
				    &kp LSHFT  &kp A     &kp S      &kp D     &kp F     &kp G          &kp H     &kp J     &kp K     &kp L    &kp DOT   &kp RSHFT
				// ├─────────┴─────────┴─────────┴─────────┴─────────┴─────────┤    ├─────────┴─────────┴─────────┴─────────┴─────────┴──────────┤
				// │  CTRL   │    Z    │    X    │    C    │    V    │    B    │    │    N    │    M    │    ;    │    '    │   ,     │   CTRL   │
				    &kp LCTRL   &kp Z     &kp X     &kp C     &kp V     &kp B          &kp N     &kp M    &o_umlaut &a_umlaut &kp COMMA &kp RCTRL
				// └─────────┴─────────┴─────────┬─────────┬─────────┬─────────┘    └─────────┬─────────┬─────────┬─────────┴─────────┴──────────┘
				//                               │   META  │   SPC   │   RSE   │    │   LWR   │   ENT   │   BSPC  │
				                                  &kp LMETA &kp SPACE   &mo 2          &mo 1    &kp RET   &kp BSPC
				//                               └─────────┴─────────┴─────────┘    └─────────┴─────────┴─────────┘
        	>;
        };

		lower_layer {
			bindings = <
				// ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐    ┌─────────┬─────────┬─────────┬─────────┬─────────┬──────────┐
				// │    F1   │    F2   │    F3   │   F4    │    F5   │    F6   │    │    F7   │    F8   │    F9   │   F10   │   F11   │   F12    │
				    &kp F1     &kp F2    &kp F3    &kp F4    &kp F5    &kp F6        &kp F7    &kp F8    &kp F9    &kp F10    &kp F11    &kp F12
				// ├─────────┴─────────┴─────────┴─────────┴─────────┴─────────┤    ├─────────┴─────────┴─────────┴─────────┴─────────┴──────────┤
				// │  SHFT   │  BRIUP  │  BRIDN  │  MUTE   │  VOLUP  │  VOLUP  │    │  LEFT   │  DOWN   │   UP    │  RIGHT  │  PG_DN  │  PG_UP   │
				   &kp LSHFT &kp C_BRI_UP &kp C_BRI_DN &kp C_MUTE &kp C_VOL_UP &kp C_VOL_DN &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp PG_DN &kp PG_UP
				// ├─────────┴─────────┴─────────┴─────────┴─────────┴─────────┤    ├─────────┴─────────┴─────────┴─────────┴─────────┴──────────┤
				// │  BTCLR   │   BT1   │   BT2   │   BT3   │   BT4   │   BT5  │    │         │         │         │         │         │   CTRL   │
				  &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans &trans &trans   &trans    &trans    &kp RCTRL
				// └─────────┴─────────┴─────────┬─────────┬─────────┬─────────┘    └─────────┬─────────┬─────────┬─────────┴─────────┴──────────┘
				//                               │   META  │    SPC  │         │    │         │   ENT   │   BSPC  │
				                                  &kp LMETA  &kp SPACE  &trans   	   &trans    &kp RET   &kp BSPC
				//                               └─────────┴─────────┴─────────┘    └─────────┴─────────┴─────────┘
			>;
        };

		raise_layer {
			bindings = <
				// ┌─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐    ┌─────────┬─────────┬─────────┬─────────┬─────────┬──────────┐
				// │   !     │   @     │   #     │   $     │   %     │   &     │    │    /    │    ~    │   =     │   (     │   )     │   ALT    │
				    &kp EXCL   &kp AT   &kp HASH &kp DLLR  &kp PRCNT &kp AMPS       &kp FSLH &kp TILDE &kp EQUAL &kp LPAR  &kp RPAR  &kp RALT
				// ├─────────┴─────────┴─────────┴─────────┴─────────┴─────────┤    ├─────────┴─────────┴─────────┴─────────┴─────────┴──────────┤
				// │   "     │    1    │    2    │    3    │    4    │   5     │    │   6     │   7     │   8     │   9     │   0     │  LBKT    │
				    &kp DQT  &kp N1    &kp N2    &kp N3    &kp N4    &kp N5         &kp N6    &kp N7     &kp N8    &kp N9    &kp N0  &kp LBKT
				// ├─────────┴─────────┴─────────┴─────────┴─────────┴─────────┤    ├─────────┴─────────┴─────────┴─────────┴─────────┴──────────┤
				// │   ?     │    <    │    >    │    _    │    \    │   *     │    │   -     │   +     │   {     │   }     │   |     │   RBKT   │
				    &kp QMARK  &kp LT    &kp GT   &kp UNDER  &kp BSLH &kp ASTRK      &kp MINUS &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE &kp RBKT
				// └─────────┴─────────┴─────────┬─────────┬─────────┬─────────┘    └─────────┬─────────┬─────────┬─────────┴─────────┴──────────┘
				//                               │   META  │  SPACE  │         │    │   TAB   │   ENT   │   BSPC  │
				                                  &kp LMETA  &kp SPACE  &trans         &kp TAB  &kp RET   &kp BSPC
				//                               └─────────┴─────────┴─────────┘    └─────────┴─────────┴─────────┘
            >;
        };
    };
};

